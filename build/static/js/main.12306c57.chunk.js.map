{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","add","copy","state","todos","slice","push","input","setState","change","e","target","value","remove","splice","id","_this2","items","map","ele","i","react_default","a","createElement","onClick","className","placeholder","onChange","type","length","Component","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAIMA,qBACJ,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAIfQ,IAAM,WACJ,IAAMC,EAAOR,EAAKS,MAAMC,MAAMC,QAC9BH,EAAKI,KAAKZ,EAAKS,MAAMI,OACrBb,EAAKc,SAAS,CAACJ,MAAOF,EAAMK,MAAO,MARTb,EAW5Be,OAAS,SAACC,GACRhB,EAAKc,SAAS,CACZD,MAAOG,EAAEC,OAAOC,SAbQlB,EAiB5BmB,OAAS,SAACH,GACR,IAAMR,EAAOR,EAAKS,MAAMC,MAAMC,QAC9BH,EAAKY,OAAOJ,EAAEC,OAAOI,GAAI,GACzBrB,EAAKc,SAAS,CAACJ,MAAOF,KAlBtBR,EAAKS,MAAQ,CAAEC,MAAM,GACNG,MAAM,IAHKb,wEAuBnB,IAAAsB,EAAAnB,KAEHoB,EAAQpB,KAAKM,MAAMC,MAAMc,IAAI,SAACC,EAAKC,GACvC,OAAOC,EAAAC,EAAAC,cAAA,MAAIR,GAAIK,GAAID,EAAIE,EAAAC,EAAAC,cAAA,UAAQR,GAAIK,EAAGI,QAASR,EAAKH,QAA7B,QAEvB,OACEQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,wBAIFF,EAAAC,EAAAC,cAAA,SAAOG,YAAY,cAAcC,SAAU9B,KAAKY,OAAQG,MAAOf,KAAKM,MAAMI,QAC1Ec,EAAAC,EAAAC,cAAA,SAAOE,UAAW,UAASV,GAAG,cAAca,KAAK,SAAShB,MAAM,MAAMY,QAAS3B,KAAKI,MACpFoB,EAAAC,EAAAC,cAAA,WAC6B,IAA5B1B,KAAKM,MAAMC,MAAMyB,OAAe,gBAAkB,uBAClDZ,UAxCSa,cA6ClBC,QAAQC,IAAI,QAEGzC,QCvCK0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.12306c57.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = { todos:[],\n                   input:\"\"}\n  } \n  add = () => {\n    const copy = this.state.todos.slice();\n    copy.push(this.state.input)\n    this.setState({todos: copy, input: \"\"})\n  }\n\n  change = (e) => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  remove = (e) =>{\n    const copy = this.state.todos.slice();\n    copy.splice(e.target.id, 1);\n    this.setState({todos: copy})\n  }\n\n  render() {\n    \n    let items = this.state.todos.map((ele, i)=>{\n    return <ul id={i}>{ele}<button id={i} onClick={this.remove}>X</button></ul>\n    })\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n           To-Do-List\n          </p>\n        </header>\n        <input placeholder=\"Enter todos\" onChange={this.change} value={this.state.input}></input>\n        <input className= \"addTodo\"id=\"form-submit\" type=\"submit\" value=\"Add\" onClick={this.add} ></input>\n        <br></br>\n        {this.state.todos.length === 0 ? \"No todos yet!\" : \"You still have todos\"}\n        {items}\n      </div>\n    );\n  }\n}\nconsole.log(\"test\");\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}